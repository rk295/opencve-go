package opencve

import (
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"os"
	"time"
)

const apiUrl = "www.opencve.io"

// Client represents a new OpenCVE API client to
// be utilized for API requests
type Client struct {
	// Username to use for authentication
	username string
	// Password to use for authentication
	password string
	// API client to utilize for making HTTP requests
	client *http.Client
	// apiURL is the base URL for the OpenCVE API
	apiURL string
}

// Used if custom client not passed in when NewClient instantiated
func defaultHTTPClient() *http.Client {
	return &http.Client{
		Timeout: time.Minute,
	}
}

// New returns a new OpenCVE API client
func New(username, password string, client *http.Client) (*Client, error) {

	if username == "" {
		return nil, missingClientConfigErr("username")
	}

	if password == "" {
		return nil, missingClientConfigErr("password")
	}

	// default to HTTP client if one is not provided
	if client == nil {
		client = defaultHTTPClient()
		client.Timeout = time.Minute * 5
	}

	return &Client{
		apiURL:   apiUrl,
		client:   client,
		username: username,
		password: password,
	}, nil
}

// makeRequest is used internally by the OpenCVE API client to
// make an API request and unmarshal into the response interface passed in
func (c *Client) makeRequest(r *http.Request, v interface{}) (*http.Response, error) {

	r.Header.Add("Authorization", "Basic "+basicAuth(c.username, c.password))
	r.Header.Set("Accept", "application/json")
	r.Header.Set("Cache-Control", "no-store, no-cache, must-revalidate, max-age=0, post-check=0, pre-check=0")
	r.Header.Set("Strict-Transport-Security", "max-age=31536000 ; includeSubDomains")

	if os.Getenv("GO_DEBUG") == "1" {
		fmt.Printf("url = %s\n", r.URL.String())
	}

	r.Close = true

	if os.Getenv("GO_DEBUG") == "1" {
		for k, v := range r.Header {
			// Skip the Authorization to prevent logging the password
			if k == "Authorization" {
				continue
			}
			fmt.Printf("request header: %s: %s\n", k, v)
		}
	}

	res, err := c.client.Do(r)
	if err != nil {
		return nil, fmt.Errorf("error making %s request to %s", r.Method, r.URL)
	}

	defer func() {
		if err := res.Body.Close(); err != nil {
			panic(err)
		}
	}()

	if os.Getenv("GO_DEBUG") == "1" {
		for k, v := range res.Header {
			// Skip the Authorization to prevent logging the password
			if k == "Authorization" {
				continue
			}
			fmt.Printf("response header: %s: %s\n", k, v)
		}
	}

	// b, err := io.ReadAll(res.Body)
	// if err != nil {
	// 	return res, nil
	// }
	// fmt.Println(string(b))

	if res.StatusCode < 200 || res.StatusCode > 299 {
		return nil, fmt.Errorf("error %d making %s request to %s: %s", res.StatusCode, r.Method, r.URL, res.Status)
	}

	if os.Getenv("GO_DEBUG") == "1" {
		for k, v := range res.Header {
			fmt.Printf("%s: %s\n", k, v)
		}
	}
	return res, json.NewDecoder(res.Body).Decode(&v)
}

func basicAuth(username, password string) string {
	auth := username + ":" + password
	return base64.StdEncoding.EncodeToString([]byte(auth))
}

// QueryFilter is an interface that can be passed around
// to OpenCVE API methods that can accept a query param filter
type QueryFilter interface {
	// QueryString should take return string with the query parameters attached
	QueryString() string
}
