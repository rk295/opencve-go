package opencve

import (
	"fmt"
	"strings"
	"time"
)

// CVEList is a list of the CVE details in the brief format.
type CVEList []CVEListItem

// CVEListItem is a single CVE details in the brief format, for details see
// the API documentation at https://docs.opencve.io/api/cve/#get-cve
type CVEListItem struct {
	ID        string    `json:"id"`
	Summary   string    `json:"summary"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

// CVEDetails holds the full details of a CVE held by OpenCVE.io, for details
// see the API documentation at https://docs.opencve.io/api/cve/#get-cvestringid
type CVEDetails struct {
	ID         string     `json:"id"`
	Summary    string     `json:"summary"`
	CreatedAt  time.Time  `json:"created_at"`
	UpdatedAt  time.Time  `json:"updated_at"`
	Cvss       Cvss       `json:"cvss"`
	Vendors    Vendors    `json:"vendors"`
	Cwes       []string   `json:"cwes"`
	RawNvdData RawNvdData `json:"raw_nvd_data"`
}

type Cvss struct {
	V2 interface{} `json:"v2"`
	V3 float64     `json:"v3"`
}

type Vendors map[string][]string

type ReferenceData struct {
	URL       string   `json:"url"`
	Name      string   `json:"name"`
	Tags      []string `json:"tags"`
	Refsource string   `json:"refsource"`
}

type References struct {
	ReferenceData []ReferenceData `json:"reference_data"`
}

type DescriptionData struct {
	Lang  string `json:"lang"`
	Value string `json:"value"`
}

type CVEDescription struct {
	DescriptionData []DescriptionData `json:"description_data"`
}

type Description struct {
	Lang  string `json:"lang"`
	Value string `json:"value"`
}

type ProblemTypeData struct {
	Description []Description `json:"description"`
}

type Problemtype struct {
	ProblemtypeData []ProblemTypeData `json:"problemtype_data"`
}

type CVEDataMeta struct {
	ID       string `json:"ID"`
	Assigner string `json:"ASSIGNER"`
}

type CVE struct {
	DataType    string         `json:"data_type"`
	References  References     `json:"references"`
	DataFormat  string         `json:"data_format"`
	Description CVEDescription `json:"description"`
	Problemtype Problemtype    `json:"problemtype"`
	DataVersion string         `json:"data_version"`
	CVEDataMeta CVEDataMeta    `json:"CVE_data_meta"`
}

type CvssV3 struct {
	Scope                 string  `json:"scope"`
	Version               string  `json:"version"`
	BaseScore             float64 `json:"baseScore"`
	AttackVector          string  `json:"attackVector"`
	BaseSeverity          string  `json:"baseSeverity"`
	VectorString          string  `json:"vectorString"`
	IntegrityImpact       string  `json:"integrityImpact"`
	UserInteraction       string  `json:"userInteraction"`
	AttackComplexity      string  `json:"attackComplexity"`
	AvailabilityImpact    string  `json:"availabilityImpact"`
	PrivilegesRequired    string  `json:"privilegesRequired"`
	ConfidentialityImpact string  `json:"confidentialityImpact"`
}

type BaseMetricV3 struct {
	CvssV3              CvssV3  `json:"cvssV3"`
	ImpactScore         float64 `json:"impactScore"`
	ExploitabilityScore float64 `json:"exploitabilityScore"`
}

type Impact struct {
	BaseMetricV3 BaseMetricV3 `json:"baseMetricV3"`
}

type CpeMatch struct {
	Cpe23URI            string        `json:"cpe23Uri"`
	CpeName             []interface{} `json:"cpe_name"`
	Vulnerable          bool          `json:"vulnerable"`
	VersionEndExcluding string        `json:"versionEndExcluding"`
}

type Nodes struct {
	Children []interface{} `json:"children"`
	Operator string        `json:"operator"`
	CpeMatch []CpeMatch    `json:"cpe_match"`
}

type Configurations struct {
	Nodes          []Nodes `json:"nodes"`
	CVEDataVersion string  `json:"CVE_data_version"`
}

type RawNvdData struct {
	Cve              CVE            `json:"cve"`
	Impact           Impact         `json:"impact"`
	PublishedDate    string         `json:"publishedDate"`
	Configurations   Configurations `json:"configurations"`
	LastModifiedDate string         `json:"lastModifiedDate"`
}

// CVEListOptions holds the available options that can be passed when
// requesting a list of CVEs
type CVEListOptions struct {
	PageQuery *int
	FilterBy  *CVEFilter
}

// CVEFilter are optional filters that can be enabled when querying a CVE list
type CVEFilter struct {
	Search  *string
	Vendor  *string
	Product *string
	CVSS    *string
	CWE     *string
}

// QueryString allows us to pass TicketListOptions as a QueryFilter and will
// return a new endpoint URL with query parameters attached
func (opts *CVEListOptions) QueryString() string {
	var qs []string

	if opts.PageQuery != nil {
		qs = append(qs, fmt.Sprintf("page=%d", *opts.PageQuery))
	}

	if opts.FilterBy != nil {
		if opts.FilterBy.Search != nil {
			qs = append(qs, fmt.Sprintf("search=%s", *opts.FilterBy.Search))
		}
		if opts.FilterBy.Vendor != nil {
			qs = append(qs, fmt.Sprintf("vendor=%s", *opts.FilterBy.Vendor))
		}
		if opts.FilterBy.Product != nil {
			qs = append(qs, fmt.Sprintf("product=%s", *opts.FilterBy.Product))
		}
		if opts.FilterBy.CVSS != nil {
			qs = append(qs, fmt.Sprintf("cvss=%s", *opts.FilterBy.CVSS))
		}
		if opts.FilterBy.CWE != nil {
			qs = append(qs, fmt.Sprintf("cwe=%s", *opts.FilterBy.CWE))
		}
	}

	return strings.Join(qs, "&")
}
