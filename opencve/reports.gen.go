package opencve

import (
	"context"
	"net/http"
	"net/url"
	"path"
)

const reportsURL = "api/reports"

// ReportsService is an interface for interacting with the reports endpoints
type ReportsService interface {
	List(context.Context) (*ReportsList, error)
	Get(context.Context, string) (*ReportsDetails, error)
}

// Reports is the interface between the HTTP client and the OpenCVE reports endpoints
func (c *Client) Reports() ReportsService {
	return &ReportsClient{client: c}
}

// ReportsClient facilitates requests with the reports endpoints
type ReportsClient struct {
	client *Client
}

// List reports
func (c *ReportsClient) List(ctx context.Context) (*ReportsList, error) {
	url := &url.URL{
		Scheme: "https",
		Host:   c.client.apiURL,
		Path:   reportsURL,
	}

	req, err := http.NewRequestWithContext(ctx, http.MethodGet, url.String(), nil)
	if err != nil {
		return nil, err
	}

	res := &ReportsList{}
	_, err = c.client.makeRequest(req, res)
	if err != nil {
		return nil, err
	}

	return res, nil
}

// Get retrieves a specific reports
func (c *ReportsClient) Get(ctx context.Context, ID string) (*ReportsDetails, error) {
	url := &url.URL{
		Scheme: "https",
		Host:   c.client.apiURL,
		Path:   path.Join(reportsURL, ID),
	}

	req, err := http.NewRequestWithContext(ctx, http.MethodGet, url.String(), nil)
	if err != nil {
		return nil, err
	}

	res := &ReportsDetails{}
	_, err = c.client.makeRequest(req, res)
	if err != nil {
		return nil, err
	}

	return res, nil
}
