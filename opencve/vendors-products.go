package opencve

import (
	"context"
	"net/url"
	"path"
)

// VendorsService is an interface for interacting with the vendors endpoints
type VendorsService interface {
	List(context.Context, QueryFilter) (*VendorsList, error)
	Get(context.Context, string) (*VendorsDetails, error)
	ListProducts(context.Context, string, QueryFilter) (*ProductList, error)
	GetProduct(context.Context, string, string) (*ProductDetails, error)
	GetProductCVE(context.Context, string, string) (*ProductCVEList, error)
}

// ListProducts retrieves a list of products for a vendor
func (c *VendorsClient) ListProducts(ctx context.Context, vendor string, filter QueryFilter) (*ProductList, error) {
	url := &url.URL{
		Scheme: "https",
		Host:   c.client.apiURL,
		Path:   path.Join(vendorsURL, vendor, "products"),
	}

	if filter != nil {
		url.RawQuery = filter.QueryString()
	}

	res := &ProductList{}
	if err := c.req(ctx, url, res); err != nil {
		return nil, err
	}

	return res, nil
}

// GetProduct retrieves a specific product
func (c *VendorsClient) GetProduct(ctx context.Context, vendor, product string) (*ProductDetails, error) {
	url := &url.URL{
		Scheme: "https",
		Host:   c.client.apiURL,
		Path:   path.Join(vendorsURL, vendor, "products", product),
	}

	res := &ProductDetails{}
	if err := c.req(ctx, url, res); err != nil {
		return nil, err
	}

	return res, nil

}

// GetProductCVE retrieves a list of CVEs for a product
func (c *VendorsClient) GetProductCVE(ctx context.Context, vendor, product string) (*ProductCVEList, error) {
	url := &url.URL{
		Scheme: "https",
		Host:   c.client.apiURL,
		Path:   path.Join(vendorsURL, vendor, "products", product, "cve"),
	}

	res := &ProductCVEList{}
	if err := c.req(ctx, url, res); err != nil {
		return nil, err
	}

	return res, nil
}
