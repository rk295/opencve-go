package opencve

import (
	"context"
	"net/http"
	"testing"

	"github.com/jarcoal/httpmock"
	"github.com/stretchr/testify/assert"
)

func TestCWEList(t *testing.T) {
	ctx := context.Background()

	resp := `[
		{
		  "id": "CWE-79",
		  "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
		  "description": "The software does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users."
		}
	  ]`

	httpmock.RegisterResponder("GET", "https://www.opencve.io/api/cwe",
		httpmock.NewStringResponder(http.StatusOK, resp))

	api, err := New("user", "pass", nil)
	assert.Nil(t, err)

	cveList, err := api.CWE().List(ctx, nil)
	assert.Nil(t, err)
	assert.Len(t, *cveList, 1)
}

func TestCWEGet(t *testing.T) {
	ctx := context.Background()

	resp := `{
		"id": "CWE-79",
		"name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
		"description": "The software does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users."
	  }`

	httpmock.RegisterResponder("GET", "https://www.opencve.io/api/cwe/CWE-79",
		httpmock.NewStringResponder(http.StatusOK, resp))

	api, err := New("user", "pass", nil)
	assert.Nil(t, err)

	cveList, err := api.CWE().Get(ctx, "CWE-79")
	assert.Nil(t, err)
	assert.Equal(t, "CWE-79", cveList.ID)
}

func TestCWEGetCVE(t *testing.T) {
	ctx := context.Background()

	resp := `[
		{
		  "id": "CVE-2020-6816",
		  "summary": "In Mozilla Bleach before 3.12, a mutation XSS in bleach.clean when RCDATA and either svg or math tags are whitelisted and the keyword argument strip=False.",
		  "created_at": "2020-03-24T22:15:00Z",
		  "updated_at": "2021-03-30T23:15:00Z"
		}
	  ]`

	httpmock.RegisterResponder("GET", "https://www.opencve.io/api/cwe/CWE-79/cve",
		httpmock.NewStringResponder(http.StatusOK, resp))

	api, err := New("user", "pass", nil)
	assert.Nil(t, err)

	cveList, err := api.CWE().GetCWEAssociatedCVEs(ctx, "CWE-79")
	assert.Nil(t, err)
	assert.Len(t, *cveList, 1)
}
