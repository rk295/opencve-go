package opencve

import (
	"context"
	"net/http"
	"net/url"
	"path"
)

const subscriptionsVendorsURL = "api/account/subscriptions/vendors"

// SubscriptionsVendorsService is an interface for interacting with the subscriptionsVendors endpoints
type SubscriptionsVendorsService interface {
	List(context.Context) (*SubscriptionsVendorsList, error)
	Get(context.Context, string) (*SubscriptionsVendorsDetails, error)
}

// SubscriptionsVendors is the interface between the HTTP client and the OpenCVE subscriptionsVendors endpoints
func (c *Client) SubscriptionsVendors() SubscriptionsVendorsService {
	return &SubscriptionsVendorsClient{client: c}
}

// SubscriptionsVendorsClient facilitates requests with the subscriptionsVendors endpoints
type SubscriptionsVendorsClient struct {
	client *Client
}

// List Fetches a list of SubscriptionsVendors
func (c *SubscriptionsVendorsClient) List(ctx context.Context) (*SubscriptionsVendorsList, error) {
	url := &url.URL{
		Scheme: "https",
		Host:   c.client.apiURL,
		Path:   subscriptionsVendorsURL,
	}

	res := &SubscriptionsVendorsList{}
	if err := c.req(ctx, url, res); err != nil {
		return nil, err
	}

	return res, nil
}

// Get retrieves a specific SubscriptionsVendors
func (c *SubscriptionsVendorsClient) Get(ctx context.Context, ID string) (*SubscriptionsVendorsDetails, error) {
	url := &url.URL{
		Scheme: "https",
		Host:   c.client.apiURL,
		Path:   path.Join(subscriptionsVendorsURL, ID),
	}

	res := &SubscriptionsVendorsDetails{}
	if err := c.req(ctx, url, res); err != nil {
		return nil, err
	}

	return res, nil
}

func (c *SubscriptionsVendorsClient) req(ctx context.Context, u *url.URL, dest interface{}) error {

	req, err := http.NewRequestWithContext(ctx, http.MethodGet, u.String(), nil)
	if err != nil {
		return err
	}

	_, err = c.client.makeRequest(req, dest)
	if err != nil {
		return err
	}

	return nil
}
