package opencve

import (
	"context"
	"net/http"
	"testing"

	"github.com/jarcoal/httpmock"
	"github.com/stretchr/testify/assert"
)

func TestVendorsList(t *testing.T) {
	ctx := context.Background()

	resp := `[
		{
		  "name": "wordpress",
		  "human_name": "Wordpress"
		}
	  ]`

	httpmock.RegisterResponder("GET", "https://www.opencve.io/api/vendors",
		httpmock.NewStringResponder(http.StatusOK, resp))

	api, err := New("user", "pass", nil)
	assert.Nil(t, err)

	l, err := api.Vendors().List(ctx, nil)
	assert.Nil(t, err)
	assert.Len(t, *l, 1)
	assert.Equal(t, "wordpress", (*l)[0].Name)
}

func TestVendorGet(t *testing.T) {
	ctx := context.Background()

	resp := `{
		"name": "wordpress",
		"human_name": "Wordpress",
		"products": [
		  "adserve",
		  "alert_before_you_post",
		  "blix",
		  "blixed",
		  "blixkrieg",
		  "captcha",
		  "cryptographp",
		  "dean_logan_wp-people_plugin",
		  "download_monitor_plugin",
		  "fcchat_widget",
		  "fgallery_plugin",
		  "filemanager",
		  "lanoba_social_plugin",
		  "math_comment_spam_protection_plugin",
		  "page_flip_image_gallery_plugin",
		  "pay-with-tweet",
		  "permalinks_migration_plugin",
		  "peter\\'s_math_anti-spam_for_wordpress",
		  "photo_album_plugin",
		  "pictpress",
		  "plugin_newsletter_plugin",
		  "pool",
		  "search_unleashed_plugin",
		  "sirius",
		  "slideshow_gallery2",
		  "sniplets_plugin",
		  "spambam_plugin",
		  "st_newsletter_plugin",
		  "unamed_theme",
		  "unamed_theme_se",
		  "upload_file_plugin",
		  "wassup_plugin",
		  "wordpress",
		  "wordpress-users",
		  "wordpress_mu",
		  "wordpressclassic",
		  "wordspew",
		  "wp-contactform",
		  "wp-footnotes",
		  "wp_cal_plugin",
		  "wp_download",
		  "wp_downloads_manager",
		  "wp_forum",
		  "wp_maintenance_mode_plugin",
		  "wpss"
		]
	  }`

	httpmock.RegisterResponder("GET", "https://www.opencve.io/api/vendors/wordpress",
		httpmock.NewStringResponder(http.StatusOK, resp))

	api, err := New("user", "pass", nil)
	assert.Nil(t, err)

	l, err := api.Vendors().Get(ctx, "wordpress")
	assert.Nil(t, err)
	assert.Equal(t, "wordpress", l.Name)
}

func TestVendorListProducts(t *testing.T) {
	ctx := context.Background()

	resp := `[
		{
		  "name": "wordpress_mu",
		  "human_name": "Wordpress Mu"
		}
	  ]`

	httpmock.RegisterResponder("GET", "https://www.opencve.io/api/vendors/wordpress/products",
		httpmock.NewStringResponder(http.StatusOK, resp))

	api, err := New("user", "pass", nil)
	assert.Nil(t, err)

	l, err := api.Vendors().ListProducts(ctx, "wordpress", nil)
	assert.Nil(t, err)
	assert.Len(t, *l, 1)
	assert.Equal(t, "wordpress_mu", (*l)[0].Name)
}

func TestVendorGetProduct(t *testing.T) {
	ctx := context.Background()

	resp := `{
		"name": "wordpress_mu",
		"human_name": "Wordpress Mu"
	  }`

	httpmock.RegisterResponder("GET", "https://www.opencve.io/api/vendors/wordpress/products/wordpress_mu",
		httpmock.NewStringResponder(http.StatusOK, resp))

	api, err := New("user", "pass", nil)
	assert.Nil(t, err)

	l, err := api.Vendors().GetProduct(ctx, "wordpress", "wordpress_mu")
	assert.Nil(t, err)
	assert.Equal(t, "wordpress_mu", l.Name)
}

func TestVendorGetProductCVEs(t *testing.T) {
	ctx := context.Background()

	resp := `[
		{
		  "id": "CVE-2009-2335",
		  "summary": "WordPress and WordPress MU before 2.8.1 exhibit different behavior for a failed login attempt depending on whether the user account exists, which allows remote attackers to enumerate valid usernames.  NOTE: the vendor reportedly disputes the significance of this issue, indicating that the behavior exists for \"user convenience.\"",
		  "created_at": "2009-07-10T21:00:00Z",
		  "updated_at": "2018-11-08T20:38:00Z"
		}
	  ]`

	httpmock.RegisterResponder("GET", "https://www.opencve.io/api/vendors/wordpress/products/wordpress_mu/cve",
		httpmock.NewStringResponder(http.StatusOK, resp))

	api, err := New("user", "pass", nil)
	assert.Nil(t, err)

	l, err := api.Vendors().GetProductCVE(ctx, "wordpress", "wordpress_mu")
	assert.Nil(t, err)
	assert.Len(t, *l, 1)
	assert.Equal(t, "CVE-2009-2335", (*l)[0].ID)
}
