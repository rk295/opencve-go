package opencve

import (
	"context"
	"net/http"
	"net/url"
	"path"
)

const cveURL = "api/cve"

// CVEService is an interface for interacting with the cve endpoints
type CVEService interface {
	List(context.Context, QueryFilter) (*CVEList, error)
	Get(context.Context, string) (*CVEDetails, error)
}

// CVE is the interface between the HTTP client and the OpenCVE cves endpoints
func (c *Client) CVE() CVEService {
	return &CVEClient{client: c}
}

// CVEClient facilitates requests with the cve endpoints
type CVEClient struct {
	client *Client
}

// List Fetches a list of CVEs
func (c *CVEClient) List(ctx context.Context, filter QueryFilter) (*CVEList, error) {
	url := &url.URL{
		Scheme: "https",
		Host:   c.client.apiURL,
		Path:   cveURL,
	}

	if filter != nil {
		url.RawQuery = filter.QueryString()
	}

	res := &CVEList{}
	if err := c.req(ctx, url, res); err != nil {
		return nil, err
	}

	return res, nil
}

// Get retrieves a specific CVE
func (c *CVEClient) Get(ctx context.Context, ID string) (*CVEDetails, error) {
	url := &url.URL{
		Scheme: "https",
		Host:   c.client.apiURL,
		Path:   path.Join(cveURL, ID),
	}

	res := &CVEDetails{}
	if err := c.req(ctx, url, res); err != nil {
		return nil, err
	}

	return res, nil
}

func (c *CVEClient) req(ctx context.Context, u *url.URL, dest interface{}) error {

	req, err := http.NewRequestWithContext(ctx, http.MethodGet, u.String(), nil)
	if err != nil {
		return err
	}

	_, err = c.client.makeRequest(req, dest)
	if err != nil {
		return err
	}

	return nil
}
