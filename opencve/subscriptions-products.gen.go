package opencve

import (
	"context"
	"net/http"
	"net/url"
	"path"
)

const subscriptionsProductsURL = "api/account/subscriptions/products"

// SubscriptionsProductsService is an interface for interacting with the subscriptionsProducts endpoints
type SubscriptionsProductsService interface {
	List(context.Context) (*SubscriptionsProductsList, error)
	Get(context.Context, string) (*SubscriptionsProductsDetails, error)
}

// SubscriptionsProducts is the interface between the HTTP client and the OpenCVE subscriptionsProducts endpoints
func (c *Client) SubscriptionsProducts() SubscriptionsProductsService {
	return &SubscriptionsProductsClient{client: c}
}

// SubscriptionsProductsClient facilitates requests with the subscriptionsProducts endpoints
type SubscriptionsProductsClient struct {
	client *Client
}

// List Fetches a list of SubscriptionsProducts
func (c *SubscriptionsProductsClient) List(ctx context.Context) (*SubscriptionsProductsList, error) {
	url := &url.URL{
		Scheme: "https",
		Host:   c.client.apiURL,
		Path:   subscriptionsProductsURL,
	}

	res := &SubscriptionsProductsList{}
	if err := c.req(ctx, url, res); err != nil {
		return nil, err
	}

	return res, nil
}

// Get retrieves a specific SubscriptionsProducts
func (c *SubscriptionsProductsClient) Get(ctx context.Context, ID string) (*SubscriptionsProductsDetails, error) {
	url := &url.URL{
		Scheme: "https",
		Host:   c.client.apiURL,
		Path:   path.Join(subscriptionsProductsURL, ID),
	}

	res := &SubscriptionsProductsDetails{}
	if err := c.req(ctx, url, res); err != nil {
		return nil, err
	}

	return res, nil
}

func (c *SubscriptionsProductsClient) req(ctx context.Context, u *url.URL, dest interface{}) error {

	req, err := http.NewRequestWithContext(ctx, http.MethodGet, u.String(), nil)
	if err != nil {
		return err
	}

	_, err = c.client.makeRequest(req, dest)
	if err != nil {
		return err
	}

	return nil
}
