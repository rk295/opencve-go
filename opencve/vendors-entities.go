package opencve

import (
	"fmt"
	"strings"
	"time"
)

type VendorsList []VendorsListItem

type VendorsListItem struct {
	Name      string `json:"name"`
	HumanName string `json:"human_name"`
}

type VendorsDetails struct {
	Name      string   `json:"name"`
	HumanName string   `json:"human_name"`
	Products  []string `json:"products"`
}

type ProductList []ProductDetails

type ProductDetails []struct {
	Name      string `json:"name"`
	HumanName string `json:"human_name"`
}

type ProductCVEList []ProductCVE

type ProductCVE struct {
	ID        string    `json:"id"`
	Summary   string    `json:"summary"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

// VendorListOptions holds the available options that can be
// passed when requesting a list of vendors.
type VendorListOptions struct {
	PageQuery *int
	FilterBy  *VendorFilter
}

// VendorFilter are optional filters that can be enabled when querying a vendor list
type VendorFilter struct {
	Letter *string
	Search *string
}

// QueryString allows us to pass VendorListOptions as a QueryFilter and
// will return a new endpoint URL with query parameters attached
func (opts *VendorListOptions) QueryString() string {
	var qs []string

	if opts.PageQuery != nil {
		qs = append(qs, fmt.Sprintf("page=%d", *opts.PageQuery))
	}

	if opts.FilterBy != nil {
		if opts.FilterBy.Letter != nil {
			qs = append(qs, fmt.Sprintf("letter=%s", *opts.FilterBy.Letter))
		}
		if opts.FilterBy.Search != nil {
			qs = append(qs, fmt.Sprintf("search=%s", *opts.FilterBy.Search))
		}
	}

	return strings.Join(qs, "&")
}

// ProductListOptions holds the available options that can be
// passed when requesting a list of products.
type ProductListOptions struct {
	PageQuery *int
	FilterBy  *ProductFilter
}

// ProductFilter are optional filters that can be enabled when querying a product list
type ProductFilter struct {
	Search *string
}

// QueryString allows us to pass ProductListOptions as a QueryFilter and
// will return a new endpoint URL with query parameters attached
func (opts *ProductListOptions) QueryString() string {
	var qs []string

	if opts.PageQuery != nil {
		qs = append(qs, fmt.Sprintf("page=%d", *opts.PageQuery))
	}

	if opts.FilterBy != nil {
		if opts.FilterBy.Search != nil {
			qs = append(qs, fmt.Sprintf("search=%s", *opts.FilterBy.Search))
		}
	}

	return strings.Join(qs, "&")
}
