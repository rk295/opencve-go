package opencve

import (
	"fmt"
	"strings"
	"time"
)

// CWEList is a list of the CWE details in the brief format. For more details
// see the API documentation at https://docs.opencve.io/api/cwe/#get-cwe
type CWEList []CWEDetails

// CWEDetails is a single CWE details in the brief format.
type CWEDetails struct {
	Description string `json:"description"`
	ID          string `json:"id"`
	Name        string `json:"name"`
}

// CWECVEList is a list of CVEs associated with a CWE
type CWECVEList []CWECVEDetails

// CWECVEDetails holds the CVE details for a CVE associated with a CWE
type CWECVEDetails struct {
	ID        string    `json:"id"`
	Summary   string    `json:"summary"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

// CWEListOptions holds the available options that can be
// passed when requesting a list of CWEs.
type CWEListOptions struct {
	PageQuery *int
	FilterBy  *CWEFilter
}

// CWEFilter are optional filters that can be enabled when querying a CWE list
type CWEFilter struct {
	Search *string
}

// QueryString allows us to pass CWEListOptions as a QueryFilter and
// will return a new endpoint URL with query parameters attached
func (opts *CWEListOptions) QueryString() string {
	var qs []string

	if opts.PageQuery != nil {
		qs = append(qs, fmt.Sprintf("page=%d", *opts.PageQuery))
	}

	if opts.FilterBy != nil {
		if opts.FilterBy.Search != nil {
			qs = append(qs, fmt.Sprintf("search=%s", *opts.FilterBy.Search))
		}
	}

	return strings.Join(qs, "&")
}
