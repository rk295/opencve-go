package opencve

import (
	"context"
	"net/http"
	"net/url"
	"path"
)

// AlertService is an interface for interacting with the Alert endpoints
type AlertService interface {
	List(context.Context, string) (*AlertList, error)
}

// Alert is the interface between the HTTP client and the OpenAlert Alerts endpoints
func (c *Client) Alert() AlertService {
	return &AlertClient{client: c}
}

// AlertClient facilitates requests with the Alert endpoints
type AlertClient struct {
	client *Client
}

// List returns a list of alerts for a given report ID.
func (c *AlertClient) List(ctx context.Context, reportID string) (*AlertList, error) {
	url := &url.URL{
		Scheme: "https",
		Host:   c.client.apiURL,
		Path:   path.Join(reportsURL, reportID, "alerts"),
	}

	res := &AlertList{}
	if err := c.req(ctx, url, res); err != nil {
		return nil, err
	}

	return res, nil
}

// Get returns details about a specific alert generated on a report.
func (c *AlertClient) Get(ctx context.Context, reportID, alertID string) (*AlertList, error) {
	url := &url.URL{
		Scheme: "https",
		Host:   c.client.apiURL,
		Path:   path.Join(reportsURL, reportID, "alerts", alertID),
	}

	res := &AlertList{}
	if err := c.req(ctx, url, res); err != nil {
		return nil, err
	}

	return res, nil
}

func (c *AlertClient) req(ctx context.Context, u *url.URL, dest interface{}) error {

	req, err := http.NewRequestWithContext(ctx, http.MethodGet, u.String(), nil)
	if err != nil {
		return err
	}

	_, err = c.client.makeRequest(req, dest)
	if err != nil {
		return err
	}

	return nil
}
