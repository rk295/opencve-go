package opencve

import (
	"context"
	"net/http"
	"net/url"
	"path"
)

const cveURL = "api/cve"

// func (am *Client) Servers() CVEService {
// 	return &CVEClient{client: c}
// }

// CVEService is an interface for interacting with the CVE endpoints
type CVEService interface {
	List(context.Context) (*CVEList, error)
	Get(context.Context, string) (*CVEDetails, error)
}

// CVEClient facilitates requests with the CVE endpoints
type CVEClient struct {
	client *Client
}

// List CVEs
func (c *CVEClient) List(ctx context.Context) (*CVEList, error) {
	url := &url.URL{
		Scheme: "https",
		Host:   c.client.apiURL,
		Path:   cveURL,
	}

	req, err := http.NewRequestWithContext(ctx, http.MethodGet, url.String(), nil)
	if err != nil {
		return nil, err
	}

	res := &CVEList{}
	_, err = c.client.makeRequest(req, res)
	if err != nil {
		return nil, err
	}

	return res, nil
}

// Get retrieves a specific CVE
func (c *CVEClient) Get(ctx context.Context, cveID string) (*CVEDetails, error) {
	url := &url.URL{
		Scheme: "https",
		Host:   c.client.apiURL,
		Path:   path.Join(cveURL, cveID),
	}

	req, err := http.NewRequestWithContext(ctx, http.MethodGet, url.String(), nil)
	if err != nil {
		return nil, err
	}

	res := &CVEDetails{}
	_, err = c.client.makeRequest(req, res)
	if err != nil {
		return nil, err
	}

	return res, nil
}
