package opencve

import (
	"context"
	"net/http"
	"net/url"
	"path"
)

const vendorsURL = "api/vendors"

// VendorsService is an interface for interacting with the vendors endpoints
type VendorsService interface {
	List(context.Context) (*VendorsList, error)
	Get(context.Context, string) (*VendorsDetails, error)
}

// Vendors is the interface between the HTTP client and the OpenCVE vendors endpoints
func (c *Client) Vendors() VendorsService {
	return &VendorsClient{client: c}
}

// VendorsClient facilitates requests with the vendors endpoints
type VendorsClient struct {
	client *Client
}

// List vendors
func (c *VendorsClient) List(ctx context.Context) (*VendorsList, error) {
	url := &url.URL{
		Scheme: "https",
		Host:   c.client.apiURL,
		Path:   vendorsURL,
	}

	req, err := http.NewRequestWithContext(ctx, http.MethodGet, url.String(), nil)
	if err != nil {
		return nil, err
	}

	res := &VendorsList{}
	_, err = c.client.makeRequest(req, res)
	if err != nil {
		return nil, err
	}

	return res, nil
}

// Get retrieves a specific vendors
func (c *VendorsClient) Get(ctx context.Context, ID string) (*VendorsDetails, error) {
	url := &url.URL{
		Scheme: "https",
		Host:   c.client.apiURL,
		Path:   path.Join(vendorsURL, ID),
	}

	req, err := http.NewRequestWithContext(ctx, http.MethodGet, url.String(), nil)
	if err != nil {
		return nil, err
	}

	res := &VendorsDetails{}
	_, err = c.client.makeRequest(req, res)
	if err != nil {
		return nil, err
	}

	return res, nil
}
