package opencve

import (
	"context"
	"net/http"
	"net/url"
	"path"
)

const vendorsURL = "api/vendors"

// Vendors is the interface between the HTTP client and the OpenCVE vendors endpoints
func (c *Client) Vendors() VendorsService {
	return &VendorsClient{client: c}
}

// VendorsClient facilitates requests with the vendors endpoints
type VendorsClient struct {
	client *Client
}

// List Fetches a list of Vendors
func (c *VendorsClient) List(ctx context.Context, filter QueryFilter) (*VendorsList, error) {
	url := &url.URL{
		Scheme: "https",
		Host:   c.client.apiURL,
		Path:   vendorsURL,
	}

	if filter != nil {
		url.RawQuery = filter.QueryString()
	}

	res := &VendorsList{}
	if err := c.req(ctx, url, res); err != nil {
		return nil, err
	}

	return res, nil
}

// Get retrieves a specific Vendors
func (c *VendorsClient) Get(ctx context.Context, ID string) (*VendorsDetails, error) {
	url := &url.URL{
		Scheme: "https",
		Host:   c.client.apiURL,
		Path:   path.Join(vendorsURL, ID),
	}

	res := &VendorsDetails{}
	if err := c.req(ctx, url, res); err != nil {
		return nil, err
	}

	return res, nil
}

func (c *VendorsClient) req(ctx context.Context, u *url.URL, dest interface{}) error {

	req, err := http.NewRequestWithContext(ctx, http.MethodGet, u.String(), nil)
	if err != nil {
		return err
	}

	_, err = c.client.makeRequest(req, dest)
	if err != nil {
		return err
	}

	return nil
}
