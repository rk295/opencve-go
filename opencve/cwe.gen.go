package opencve

import (
	"context"
	"net/http"
	"net/url"
	"path"
)

const cweURL = "api/cwe"

// CWE is the interface between the HTTP client and the OpenCVE cwes endpoints
func (c *Client) CWE() CWEService {
	return &CWEClient{client: c}
}

// CWEClient facilitates requests with the cwe endpoints
type CWEClient struct {
	client *Client
}

// List Fetches a list of CWEs
func (c *CWEClient) List(ctx context.Context, filter QueryFilter) (*CWEList, error) {
	url := &url.URL{
		Scheme: "https",
		Host:   c.client.apiURL,
		Path:   cweURL,
	}

	if filter != nil {
		url.RawQuery = filter.QueryString()
	}

	res := &CWEList{}
	if err := c.req(ctx, url, res); err != nil {
		return nil, err
	}

	return res, nil
}

// Get retrieves a specific CWE
func (c *CWEClient) Get(ctx context.Context, ID string) (*CWEDetails, error) {
	url := &url.URL{
		Scheme: "https",
		Host:   c.client.apiURL,
		Path:   path.Join(cweURL, ID),
	}

	res := &CWEDetails{}
	if err := c.req(ctx, url, res); err != nil {
		return nil, err
	}

	return res, nil
}

func (c *CWEClient) req(ctx context.Context, u *url.URL, dest interface{}) error {

	req, err := http.NewRequestWithContext(ctx, http.MethodGet, u.String(), nil)
	if err != nil {
		return err
	}

	_, err = c.client.makeRequest(req, dest)
	if err != nil {
		return err
	}

	return nil
}
